import { Schema, model } from 'mongoose';

const userSchema = new Schema({
  fullName: { type: String, required: true, trim: true },
  email: { type: String, unique: true, required: true, index: true, lowercase: true },
  password: { type: String, required: true },
  avatar:{ type:String , default:"" },
  phone: { type: String, required: true, match: [/^\d{10}$/, "Phone number must be exactly 10 digits"]},
  userRole: { type: String, enum: ["admin", "user"], default: "user" },
  addressDetails: [{type:Schema.Types.ObjectId,ref :"Address" }],
  lastLoginDate: { type: Date, default: Date.now },
  shopping_cart :[{type:Schema.Types.ObjectId,ref :"cart"}],
  orderHistory : [{type:Schema.Types.ObjectId,ref :"order"}]
},{timestamps:true})
const User = model('User', userSchema);

export default User;

import { Schema, model } from 'mongoose';

const productSchema = new Schema({
    productName: { type: String, required: true, trim: true },
    category : { type: Schema.Types.ObjectId, ref: "Category" },
    dietaryType: { type: String, enum: ['Veg', 'Non-Veg', 'Vegan'], required: true },
    brand: { type: String, required: true, trim: true },
    mrp: { type: Number, required: true, min: 0 },
    discountPercent: { type: Number, required: true, min: 0, max: 100 },
    discountedPrice: { type: Number, required: true },
    weight: { type: String, required: true, enum: ["kg", "g", "l", "ml", "pcs", "dozen", "pack"]},
    stockQty: { type: Number, required: true, min: 0 },
    productImage: { type: String, required: true, trim: true }
}, { timestamps: true });

productSchema.pre("save", function(next) {
    this.discountedPrice = this.mrp - (this.mrp * this.discountPercent / 100);
    if (this.discountedPrice < 0) {
        this.discountedPrice = 0;
    }
    next();
});

const Product = model('Product', productSchema);

export default Product ;

import { Schema, model } from 'mongoose';

const orderSchema = new Schema({
  userId: { type: Schema.Types.ObjectId, ref: "User", required: true },
  orderId: { type: String, required: true, unique: true },
  productDetails: [{type: Schema.Types.ObjectId, ref: "Product", required: true} ],
  paymentType: { type: String, enum: ["COD", "UPI"], required: true },
  deliveryAddress: { type: Schema.Types.ObjectId, ref: "Address", required: true },
  deliveryStatus: { 
    type: String, 
    enum: ["Pending", "Processing", "Shipped", "Delivered", "Cancelled"], 
    default: "Pending", 
    required: true 
  },
  subTotalAmt: { type: Number, required: true, min: 0 },
  totalAmt: { type: Number, required: true, min: 0 },
  orderDate: { type: Date, default: Date.now }
}, { timestamps: true });

orderSchema.pre("save", async function(next) {
  if (!this.orderId) {
      this.orderId = "ORD-" + Date.now();
  }
  next();
});
const Order = model("Order", orderSchema);

export default Order ;

import { Schema, model } from 'mongoose';

const categorySchema = new Schema({
    catName: { type: String, required: true, unique: true, trim: true },
    catImage: { type: String },
    subCategory : [{ 
        sName:{ type:String } ,
        sImage:{ type: String }
    }]
}, { timestamps: true });

const Category = model("Category", categorySchema);

export default Category;

import { Schema, model } from 'mongoose';

const CartSchema = new Schema({
    userId : {type:Schema.Types.ObjectId, ref :"User", required: true },
    productId : { type:Schema.Types.ObjectId, ref :"Product", required: true  },
    quantity : { type :Number, default : 1 }
  
},{timestamps:true});

const Cart = model('Cart', CartSchema);

export default Cart;

import { Schema, model } from 'mongoose';
const addressSchema = new Schema({
    address_line: { type: String, required: true, trim: true },
    city: { type: String, required: true, trim: true },
    state: { type: String, required: true, trim: true },
    pincode: { type: String,  required: true,  match: [/^\d{6}$/, "Invalid pincode format"],  trim: true},
    userId : {type:Schema.Types.ObjectId, ref :"User", required: true }
});

const Address = model("Address", addressSchema);

export default Address;